module org.bitbucket.inkytonik.cooma.CoomaParser;

header {
    import org.bitbucket.inkytonik.cooma.CoomaParserSyntax.*;
    import scala.math.BigInt;
}

// Cooma source language

Program =
  Spacing Expression EOF.

Expression {paren} =
    "fun" '(' Arguments ")" Expression                       {Fun, right, 4}
  | '(' ArgumentTypes ")" Expression                         {FunT, right, 4}
  | Expression sp "match" '{' nest(Case+) \n '}'             {Mat, left, 3}
  | Expression "&" Expression                                {Cat, left, 2}
  | Expression '(' Expression ** "," ')'                     {App, left, 1}
  | Expression '.' FieldUse                                  {Sel, left, 1}
  | Expression "**" Expression                               {Pow, left, 5}
  | Expression "*" Expression                                {Mul, left, 6}
  | Expression "/" Expression                                {Div, left, 6}
  | Expression "+" Expression                                {Add, left, 7}
  | Expression "-" Expression                                {Sub, left, 7}
  | Expression "<=" Expression                               {Lte, none, 8}
  | Expression ">=" Expression                               {Gte, none, 8}
  | Expression "<" Expression                                {Lt, none, 8}
  | Expression ">" Expression                                {Gt, none, 8}
  | Expression "&&" Expression                               {And, left, 9}
  | Expression "||" Expression                               {Or, left, 10}
  | '!' Expression                                           {Not}
  | '{' '}'                                                  {Uni}
  | 'Unit'                                                   {UniT}
  | '{' nestnl(BlockExp) \n '}'                              {Blk}
  | '{' nest(Field ++ ',') \n '}'                            {Rec}
  | '{' nest(FieldType ++ ',') \n '}'                        {RecT}
  | '<' nest(Field) \n '>'                                   {Var}
  | '<' nest(FieldType ++ ',') \n '>'                        {VarT}
  | 'false'                                                  {False}
  | 'true'                                                   {True}
  | 'Boolean'                                                {BoolT}
  | 'Booleans'                                               {Booleans}
  | IntLit                                                   {Num, 1: BigInt.apply : BigInt}
  | 'Int'                                                    {IntT}
  | 'Ints'                                                   {Ints}
  | 'Reader'                                                 {ReaderT}
  | 'ReaderWriter'                                           {ReaderWriterT}
  | 'Writer'                                                 {WriterT}
  | StringLit                                                {Str}
  | 'String'                                                 {StrT}
  | 'Strings'                                                {Strings}
  | 'Type'                                                   {TypT}
  | 'equal'                                                  {Eql}
  | "prim" Identifier '(' Expression ** "," ')'              {Prm}
  | IdnUse                                                   {Idn}.

Arguments =
  Argument ** ",".

Argument =
  IdnDef sp ":" Expression StringLit?.

ArgumentTypes =
  ArgumentType ** ",".

ArgumentType =
  (IdnDef sp ":")? Expression.

Case =
  \n "case" Identifier '(' IdnDef ")" '=>' nestnl(Expression).

Field =
  \n Identifier sp "=" Expression.

FieldUse =
  Identifier.

BlockExp =
    Defs BlockExp   {BlkDef}
  | Let BlockExp    {BlkLet}
  | Expression      {Return}.

Defs =
  Def+.

Def =
  "def" IdnDef sp Body \n.

Body =
  '(' Arguments ")" Expression sp '=' nestnl (Expression).

Let =
  LetKind IdnDef (":" Expression)? sp "=" Expression \n.

LetKind =
    "type" {Type}
  | "val" {Val}.

FieldType =
  \n Identifier sp ":" Expression.

// Lexical syntax

IdnDef =
  Identifier.

IdnUse =
  Identifier.

IntLit : Token =
  '-'? Digits.

Digits : String =
  Digit+.

Digit : String =
  [0-9].

StringLit : Token =
  '"' StringChar* '"'.

StringChar : String =
  '\\' ([btnfr] / '\\' / '"') /
  !'"' _.

OctDigit : String =
  [0-7].

// Constructs used by REPL parsing

Whitespace : Void =
  Spacing EOF.

REPLInput =
  Spacing REPLEntry EOF.

REPLEntry : REPLInput =
    Expression  {REPLExp}
  | Def         {REPLDef}
  | Let         {REPLLet}.
